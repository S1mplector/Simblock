using System;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using SimBlock.Core.Application.Interfaces;
using SimBlock.Core.Domain.Entities;
using SimBlock.Presentation.ViewModels;
using SimBlock.Presentation.Commands;

namespace SimBlock.Presentation.Forms
{
    /// <summary>
    /// Form for managing macros (recording, playing, editing, etc.)
    /// </summary>
    public partial class MacroManagerForm : Form
    {
        private readonly MacroManagerViewModel _viewModel;
        private readonly ILogger<MacroManagerForm> _logger;
        private bool _isInitialized;

        // UI Controls
        private TableLayoutPanel _mainLayout = null!;
        private Panel _toolbarPanel = null!;
        private Panel _contentPanel = null!;
        private Panel _statusPanel = null!;
        private ListView _macroListView = null!;
        private TextBox _searchTextBox = null!;
        private ComboBox _categoryComboBox = null!;
        private Button _recordButton = null!;
        private Button _playButton = null!;
        private Button _stopButton = null!;
        private Button _editButton = null!;
        private Button _deleteButton = null!;
        private Button _duplicateButton = null!;
        private Button _createButton = null!;
        private Button _refreshButton = null!;
        private Button _exportButton = null!;
        private Button _importButton = null!;
        private Button _clearFiltersButton = null!;
        private Label _statusLabel = null!;
        private ProgressBar _progressBar = null!;

        /// <summary>
        /// Initializes a new instance of the MacroManagerForm class
        /// </summary>
        public MacroManagerForm(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
                throw new ArgumentNullException(nameof(serviceProvider));

            InitializeComponent();
            
            // Get required services
            _logger = serviceProvider.GetRequiredService<ILogger<MacroManagerForm>>();
            _viewModel = serviceProvider.GetRequiredService<MacroManagerViewModel>();
            
            // Set up form properties
            Text = "Macro Manager";
            StartPosition = FormStartPosition.CenterParent;
            ShowInTaskbar = false;
            FormBorderStyle = FormBorderStyle.SizableToolWindow;
            MinimizeBox = false;
            MaximizeBox = false;
            Size = new Size(1000, 700);
            MinimumSize = new Size(800, 600);
            
            // Initialize the UI
            InitializeUI();
            
            // Subscribe to view model events
            SubscribeToViewModelEvents();
            
            _isInitialized = true;
        }

        private void InitializeComponent()
        {
            SuspendLayout();
            
            // This method is typically generated by the designer
            // For now, we'll create controls programmatically
            
            ResumeLayout(false);
        }

        private void InitializeUI()
        {
            try
            {
                _logger.LogDebug("Initializing MacroManagerForm UI");

                // Create main layout
                _mainLayout = new TableLayoutPanel
                {
                    Dock = DockStyle.Fill,
                    ColumnCount = 1,
                    RowCount = 3,
                    BackColor = Color.FromArgb(45, 45, 48)
                };

                _mainLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 60)); // Toolbar
                _mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100)); // Content
                _mainLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 30)); // Status

                Controls.Add(_mainLayout);

                // Create toolbar
                CreateToolbar();

                // Create content area
                CreateContentArea();

                // Create status bar
                CreateStatusBar();

                // Apply theme
                ApplyTheme();

                _logger.LogDebug("MacroManagerForm UI initialized successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize MacroManagerForm UI");
                throw;
            }
        }

        private void CreateToolbar()
        {
            _toolbarPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(37, 37, 38),
                Padding = new Padding(10, 10, 10, 10)
            };

            var toolbarLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 12,
                RowCount = 1,
                BackColor = Color.Transparent
            };

            // Configure column styles
            for (int i = 0; i < 11; i++)
            {
                toolbarLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 80));
            }
            toolbarLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100)); // Last column takes remaining space

            // Create buttons
            _recordButton = CreateToolbarButton("Record", "Start recording a new macro", Color.FromArgb(0, 122, 204));
            _playButton = CreateToolbarButton("Play", "Play selected macro", Color.FromArgb(16, 124, 16));
            _stopButton = CreateToolbarButton("Stop", "Stop current operation", Color.FromArgb(196, 43, 28));
            _editButton = CreateToolbarButton("Edit", "Edit selected macro", Color.FromArgb(106, 153, 85));
            _deleteButton = CreateToolbarButton("Delete", "Delete selected macro", Color.FromArgb(196, 43, 28));
            _duplicateButton = CreateToolbarButton("Duplicate", "Duplicate selected macro", Color.FromArgb(68, 131, 196));
            _createButton = CreateToolbarButton("Create", "Create new empty macro", Color.FromArgb(0, 122, 204));
            _refreshButton = CreateToolbarButton("Refresh", "Refresh macro list", Color.FromArgb(106, 153, 85));
            _exportButton = CreateToolbarButton("Export", "Export selected macro", Color.FromArgb(156, 118, 29));
            _importButton = CreateToolbarButton("Import", "Import macros", Color.FromArgb(156, 118, 29));
            _clearFiltersButton = CreateToolbarButton("Clear", "Clear all filters", Color.FromArgb(128, 128, 128));

            // Add buttons to layout
            toolbarLayout.Controls.Add(_recordButton, 0, 0);
            toolbarLayout.Controls.Add(_playButton, 1, 0);
            toolbarLayout.Controls.Add(_stopButton, 2, 0);
            toolbarLayout.Controls.Add(_editButton, 3, 0);
            toolbarLayout.Controls.Add(_deleteButton, 4, 0);
            toolbarLayout.Controls.Add(_duplicateButton, 5, 0);
            toolbarLayout.Controls.Add(_createButton, 6, 0);
            toolbarLayout.Controls.Add(_refreshButton, 7, 0);
            toolbarLayout.Controls.Add(_exportButton, 8, 0);
            toolbarLayout.Controls.Add(_importButton, 9, 0);
            toolbarLayout.Controls.Add(_clearFiltersButton, 10, 0);

            _toolbarPanel.Controls.Add(toolbarLayout);
            _mainLayout.Controls.Add(_toolbarPanel, 0, 0);
        }

        private Button CreateToolbarButton(string text, string tooltip, Color backColor)
        {
            var button = new Button
            {
                Text = text,
                Dock = DockStyle.Fill,
                FlatStyle = FlatStyle.Flat,
                BackColor = backColor,
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 8.25F, FontStyle.Bold),
                Margin = new Padding(2),
                UseVisualStyleBackColor = false
            };

            button.FlatAppearance.BorderSize = 0;
            button.FlatAppearance.MouseOverBackColor = ControlPaint.Light(backColor, 0.2f);
            button.FlatAppearance.MouseDownBackColor = ControlPaint.Dark(backColor, 0.2f);

            // Add tooltip
            var toolTip = new ToolTip();
            toolTip.SetToolTip(button, tooltip);

            return button;
        }

        private void CreateContentArea()
        {
            _contentPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(45, 45, 48),
                Padding = new Padding(10)
            };

            var contentLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 1,
                RowCount = 2,
                BackColor = Color.Transparent
            };

            contentLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 40)); // Search/Filter row
            contentLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100)); // Macro list

            // Create search/filter panel
            CreateSearchFilterPanel(contentLayout);

            // Create macro list
            CreateMacroList(contentLayout);

            _contentPanel.Controls.Add(contentLayout);
            _mainLayout.Controls.Add(_contentPanel, 0, 1);
        }

        private void CreateSearchFilterPanel(TableLayoutPanel parentLayout)
        {
            var searchPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };

            var searchLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 4,
                RowCount = 1,
                BackColor = Color.Transparent
            };

            searchLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 60)); // Label
            searchLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 60)); // Search box
            searchLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 70)); // Category label
            searchLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 40)); // Category combo

            // Search label and textbox
            var searchLabel = new Label
            {
                Text = "Search:",
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleLeft,
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 9F)
            };

            _searchTextBox = new TextBox
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(62, 62, 66),
                ForeColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                Font = new Font("Segoe UI", 9F),
                Margin = new Padding(0, 8, 10, 8)
            };

            // Category label and combobox
            var categoryLabel = new Label
            {
                Text = "Category:",
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleLeft,
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 9F)
            };

            _categoryComboBox = new ComboBox
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(62, 62, 66),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                DropDownStyle = ComboBoxStyle.DropDownList,
                Font = new Font("Segoe UI", 9F),
                Margin = new Padding(0, 8, 0, 8)
            };

            searchLayout.Controls.Add(searchLabel, 0, 0);
            searchLayout.Controls.Add(_searchTextBox, 1, 0);
            searchLayout.Controls.Add(categoryLabel, 2, 0);
            searchLayout.Controls.Add(_categoryComboBox, 3, 0);

            searchPanel.Controls.Add(searchLayout);
            parentLayout.Controls.Add(searchPanel, 0, 0);
        }

        private void CreateMacroList(TableLayoutPanel parentLayout)
        {
            _macroListView = new ListView
            {
                Dock = DockStyle.Fill,
                View = View.Details,
                FullRowSelect = true,
                GridLines = true,
                MultiSelect = false,
                BackColor = Color.FromArgb(37, 37, 38),
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 9F),
                BorderStyle = BorderStyle.FixedSingle
            };

            // Add columns
            _macroListView.Columns.Add("Name", 200);
            _macroListView.Columns.Add("Description", 300);
            _macroListView.Columns.Add("Category", 120);
            _macroListView.Columns.Add("Events", 80);
            _macroListView.Columns.Add("Duration", 100);
            _macroListView.Columns.Add("Status", 80);
            _macroListView.Columns.Add("Last Executed", 120);

            parentLayout.Controls.Add(_macroListView, 0, 1);
        }

        private void CreateStatusBar()
        {
            _statusPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(0, 122, 204),
                Padding = new Padding(10, 5, 10, 5)
            };

            var statusLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 2,
                RowCount = 1,
                BackColor = Color.Transparent
            };

            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100));
            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 200));

            _statusLabel = new Label
            {
                Text = "Ready",
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleLeft,
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 9F)
            };

            _progressBar = new ProgressBar
            {
                Dock = DockStyle.Fill,
                Style = ProgressBarStyle.Continuous,
                Visible = false,
                Margin = new Padding(0, 2, 0, 2)
            };

            statusLayout.Controls.Add(_statusLabel, 0, 0);
            statusLayout.Controls.Add(_progressBar, 1, 0);

            _statusPanel.Controls.Add(statusLayout);
            _mainLayout.Controls.Add(_statusPanel, 0, 2);
        }

        private void ApplyTheme()
        {
            // Apply consistent theming across all controls
            BackColor = Color.FromArgb(45, 45, 48);
            ForeColor = Color.White;
        }

        private void SubscribeToViewModelEvents()
        {
            if (_viewModel == null)
                return;

            try
            {
                // Subscribe to property changes
                _viewModel.PropertyChanged += OnViewModelPropertyChanged;

                // Wire up command bindings
                _recordButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.StartRecordingCommand);
                _playButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.PlayMacroCommand);
                _stopButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.StopRecordingCommand);
                _editButton.Click += (s, e) => ExecuteCommandSafely(_viewModel.EditMacroCommand);
                _deleteButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.DeleteMacroCommand);
                _duplicateButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.DuplicateMacroCommand);
                _createButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.CreateMacroCommand);
                _refreshButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.RefreshCommand);
                _exportButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.ExportMacrosCommand);
                _importButton.Click += async (s, e) => await ExecuteCommandSafelyAsync(_viewModel.ImportMacrosCommand);
                _clearFiltersButton.Click += (s, e) => ExecuteCommandSafely(_viewModel.ClearFiltersCommand);

                // Wire up UI events
                _searchTextBox.TextChanged += (s, e) => _viewModel.SearchText = _searchTextBox.Text;
                _categoryComboBox.SelectedIndexChanged += (s, e) => _viewModel.SelectedCategory = _categoryComboBox.SelectedItem?.ToString() ?? "";
                _macroListView.SelectedIndexChanged += OnMacroListSelectionChanged;

                // Subscribe to collection changes
                _viewModel.Macros.CollectionChanged += (s, e) => UpdateMacroList();
                _viewModel.FilteredMacros.CollectionChanged += (s, e) => UpdateMacroList();
                _viewModel.Categories.CollectionChanged += (s, e) => UpdateCategoryComboBox();

                _logger.LogDebug("Successfully subscribed to view model events");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to subscribe to view model events");
            }
        }

        private void OnViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (!_isInitialized)
                return;

            try
            {
                switch (e.PropertyName)
                {
                    case nameof(_viewModel.StatusMessage):
                        UpdateStatusMessage();
                        break;
                    case nameof(_viewModel.IsLoading):
                        UpdateLoadingState();
                        break;
                    case nameof(_viewModel.IsRecording):
                    case nameof(_viewModel.IsPlaying):
                        UpdateButtonStates();
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error handling view model property change: {PropertyName}", e.PropertyName);
            }
        }

        private void UpdateStatusMessage()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateStatusMessage));
                return;
            }

            _statusLabel.Text = _viewModel.StatusMessage ?? "Ready";
        }

        private void UpdateLoadingState()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateLoadingState));
                return;
            }

            _progressBar.Visible = _viewModel.IsLoading;
            _progressBar.Style = _viewModel.IsLoading ? ProgressBarStyle.Marquee : ProgressBarStyle.Continuous;
        }

        private void UpdateButtonStates()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateButtonStates));
                return;
            }

            _recordButton.Enabled = _viewModel.CanRecord;
            _playButton.Enabled = _viewModel.CanPlayMacro;
            _stopButton.Enabled = _viewModel.IsRecording || _viewModel.IsPlaying;
            _editButton.Enabled = _viewModel.CanEditMacro;
            _deleteButton.Enabled = _viewModel.CanDeleteMacro;
            _duplicateButton.Enabled = _viewModel.CanDuplicateMacro;
            _createButton.Enabled = _viewModel.IsIdle;
            _exportButton.Enabled = _viewModel.CanExportMacro;
        }

        private void UpdateMacroList()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateMacroList));
                return;
            }

            try
            {
                _macroListView.BeginUpdate();
                _macroListView.Items.Clear();

                foreach (var macro in _viewModel.FilteredMacros)
                {
                    var item = new ListViewItem(macro.Name)
                    {
                        Tag = macro,
                        BackColor = macro.IsEnabled ? Color.FromArgb(37, 37, 38) : Color.FromArgb(60, 60, 60),
                        ForeColor = macro.IsEnabled ? Color.White : Color.Gray
                    };

                    item.SubItems.Add(macro.Description ?? "");
                    item.SubItems.Add(macro.Category ?? "");
                    item.SubItems.Add(macro.Events.Count.ToString());
                    item.SubItems.Add($"{macro.Duration.TotalSeconds:F1}s");
                    item.SubItems.Add(macro.Status.ToString());
                    item.SubItems.Add(macro.LastExecutedAt?.ToString("MM/dd HH:mm") ?? "Never");

                    _macroListView.Items.Add(item);
                }
            }
            finally
            {
                _macroListView.EndUpdate();
            }
        }

        private void UpdateCategoryComboBox()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateCategoryComboBox));
                return;
            }

            var selectedCategory = _categoryComboBox.SelectedItem?.ToString();
            
            _categoryComboBox.Items.Clear();
            foreach (var category in _viewModel.Categories)
            {
                _categoryComboBox.Items.Add(category);
            }

            if (!string.IsNullOrEmpty(selectedCategory) && _categoryComboBox.Items.Contains(selectedCategory))
            {
                _categoryComboBox.SelectedItem = selectedCategory;
            }
            else if (_categoryComboBox.Items.Count > 0)
            {
                _categoryComboBox.SelectedIndex = 0;
            }
        }

        private void OnMacroListSelectionChanged(object? sender, EventArgs e)
        {
            if (_macroListView.SelectedItems.Count > 0)
            {
                var selectedMacro = _macroListView.SelectedItems[0].Tag as Macro;
                _viewModel.SelectedMacro = selectedMacro;
            }
            else
            {
                _viewModel.SelectedMacro = null;
            }
        }

        private async Task ExecuteCommandSafelyAsync(System.Windows.Input.ICommand command)
        {
            try
            {
                if (command?.CanExecute(null) == true)
                {
                    if (command is AsyncRelayCommand asyncCommand)
                    {
                        await asyncCommand.ExecuteAsync();
                    }
                    else
                    {
                        command.Execute(null);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing command");
                MessageBox.Show(this, $"Error: {ex.Message}", "Command Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ExecuteCommandSafely(System.Windows.Input.ICommand command)
        {
            try
            {
                if (command?.CanExecute(null) == true)
                {
                    command.Execute(null);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing command");
                MessageBox.Show(this, $"Error: {ex.Message}", "Command Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            try
            {
                // Unsubscribe from events
                if (_viewModel != null)
                {
                    _viewModel.PropertyChanged -= OnViewModelPropertyChanged;
                }

                _logger.LogDebug("MacroManagerForm closing");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during form closing");
            }

            base.OnFormClosing(e);
        }
    }
}
